/**
 * @module ApLayoutMixin
 */
'use strict'

import React, {PropTypes as types} from 'react'
import deepEqual from 'deep-equal'

const LAYOUT_DELAY = 80

class ApLayoutEvent {
  constructor (values) {
    const s = this
    Object.assign(s, values)
  }
}

/** @lends ApLayoutMixin */
const ApLayoutMixin = {

  // --------------------
  // Custom
  // --------------------

  $apLayoutMixin: true,

  /**
   * Do layout
   * @param {boolean} [immediate] - Execute with no time
   */
  layout (immediate = false) {
    const s = this
    clearTimeout(s._layoutTimer)
    s._layoutTimer = setTimeout(() => {
      if (!s._readyToLayout) {
        return
      }
      let { props } = s
      let layouts = s.calcLayouts && s.calcLayouts()
      let changed = !deepEqual(s.layouts, layouts)
      if (changed) {
        s.layouts = layouts
        s.forceUpdate()
        if (props.onLayout) {
          let event = new ApLayoutEvent({ layouts })
          props.onLayout(event)
        }
      }
    }, immediate ? 0 : LAYOUT_DELAY)
  },

  /**
   * Layout data
   */
  layouts: {},

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Handler for layout event */
    onLayout: types.func
  },

  statics: {
    ApLayoutEvent,
    LAYOUT_DELAY
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount () {
    const s = this
    if (s.getInitialLayouts) {
      s.layouts = s.getInitialLayouts()
    }
  },

  componentDidMount () {
    const s = this
    if (!s.calcLayouts) {
      console.warn('[ApLayoutMixin] Should implement .calcLayouts()')
    }
    window.addEventListener('resize', s.layout)
    s._readyToLayout = true
    s.layout(true)
  },

  componentWillReceiveProps (nextProps) {
    const s = this
    s.layout()
  },

  componentWillUnmount () {
    const s = this
    s._readyToLayout = false
    clearTimeout(s._layoutTimer)
    window.removeEventListener('resize', s.layout)
    delete s._layoutTimer
  },

  // --------------------
  // Private
  // --------------------

  _readyToLayout: false
}

export default ApLayoutMixin
