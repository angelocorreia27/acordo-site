import styled from '@emotion/styled';
import { createElement, useState } from 'react';
import { keyframes } from '@emotion/core';
import { __rest } from 'tslib';

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n    stroke-dasharray: ", ";\n    stroke-dashoffset: 0;\n    transform-origin: center;\n    animation: ", " ", " ease-in-out infinite;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    animation: ", " ", " linear infinite;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral([" \n 0% { stroke-dashoffset: ", "; }\n 50% {\n   stroke-dashoffset: ", ";\n   transform:rotate(135deg);\n }\n 100% {\n   stroke-dashoffset: ", ";\n   transform:rotate(450deg);\n }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    0%    { transform: rotate(0deg); }\n    100%  { transform: rotate(270deg); }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var duration = "1.4s";
var offset = 187;
var rotator =
/*#__PURE__*/
keyframes(
/*#__PURE__*/
_templateObject());
var dash =
/*#__PURE__*/
keyframes(
/*#__PURE__*/
_templateObject2(), offset, offset / 4, offset);

var LoadingSpinner = function LoadingSpinner() {
  return createElement(LoadingSvg, {
    width: "65px",
    height: "65px",
    viewBox: "0 0 66 66"
  }, createElement(Circle, {
    fill: "none",
    strokeWidth: "6",
    strokeLinecap: "round",
    stroke: "#000",
    cx: "33",
    cy: "33",
    r: "30"
  }));
};

var LoadingSvg =
/*#__PURE__*/
styled.svg(
/*#__PURE__*/
_templateObject3(), rotator, duration);
var Circle =
/*#__PURE__*/
styled.circle(
/*#__PURE__*/
_templateObject4(), offset, dash, duration);

var UpwardIcon = function UpwardIcon(_a) {
  var props = __rest(_a, []);

  return createElement("svg", Object.assign({
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, props), createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0V0z"
  }), createElement("path", {
    d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
  }));
};

// helper function to determine if a value is a Date object
var isDate = function isDate(item) {
  if (Object.prototype.toString.call(item) === "[object Date]") {
    return true;
  }

  return false;
};

function _templateObject11() {
  var data = _taggedTemplateLiteral(["\n    width: ", ";\n    min-width: ", ";\n    padding: 0px 10px;\n    /* https://davidwalsh.name/css-ellipsis */\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    flex-flow: row nowrap;\n    background-color: inherit;\n    color: inherit;\n    cursor: ", ";\n    &:focus {\n        outline: none;\n    }\n    &:focus-visible {\n        outline: auto 5px;\n        outline-color: inherit;\n    }\n    width: 100%;\n    border: none;\n    border-bottom: 1px solid #e0e0e0;\n    height: 48px;\n    align-items: center;\n    /* material subtitle 1 */\n    font-size: 16px;\n    letter-spacing: 0.15;\n"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["\n    user-select: none;\n    display: flex;\n    border: none;\n    background-color: inherit;\n    color: inherit;\n    align-items: center;\n    &:focus {\n        outline: none;\n    }\n\n    &:focus-visible {\n        outline: auto 5px;\n        outline-color: inherit;\n    }\n\n    cursor: ", ";\n    width: ", ";\n    min-width: ", ";\n    &:hover > #hoverableArrow {\n        display: inline;\n    }\n    padding: 0px 10px;\n    /* https://davidwalsh.name/css-ellipsis */\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    flex-flow: row nowrap;\n    height: 48px;\n    align-items: center;\n    border-bottom: 1px solid #e0e0e0;\n    /* material subtitle 2 */\n    font-size: 14px;\n    font-weight: bold;\n    letter-spacing: 0.1;\n"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    height: 64px;\n    align-items: center;\n    font-size: 24px;\n    flex: 1;\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    align-items: center;\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    flex-flow: column nowrap;\n    overflow-x: auto;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["\n    font-family: \"Roboto\", \"Helvetica\", \"Arial\", \"sans-serif\";\n"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["\n    display: none;\n"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["\n    display: flex;\n    justify-content: center;\n    padding: 12px;\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n    transition: transform 0.5s;\n    transform: ", ";\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}

var ReactMaterialTable = function ReactMaterialTable(props) {
  var _React$useState = useState(props.defaultSort),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      sortedColumn = _React$useState2[0],
      setSortedColumn = _React$useState2[1]; // initialise array with all false values because
  // no items are open initially


  var bools = new Array(props.data.length).fill(false);

  var _React$useState3 = useState(bools),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      openIndexes = _React$useState4[0],
      setOpenIndexes = _React$useState4[1];

  var toggleAccordion = function toggleAccordion(index) {
    return function () {
      // update the openIndexes bools
      var tmp = _toConsumableArray(openIndexes);

      tmp[index] = !tmp[index];
      setOpenIndexes(tmp);
    };
  };

  var tableBody = function tableBody() {
    if (props.loading) {
      return createElement(CenteredDiv, null, createElement(LoadingSpinner, null));
    }

    if (props.data.length === 0) {
      return createElement(CenteredDiv, null, props.noData || "No Data");
    } // If the sorting function is provided, it is assumed all sorting is handled outside.


    if (props.sortCallback) {
      return props.data.map(renderRow(props.columns, props.onRowSelection, props.accordion, toggleAccordion, openIndexes, props.defaultMinColWidth));
    }

    return sortData(props.data, props.columns, sortedColumn).map(renderRow(props.columns, props.onRowSelection, props.accordion, toggleAccordion, openIndexes, props.defaultMinColWidth));
  };

  return createElement(MainDiv, {
    className: props.className
  }, buildTitleRow(props.header, props.headerCustomContent), createElement(TableDiv, {
    className: "table-div"
  }, createElement(TableHeaderRowDiv, {
    className: "table-header-row"
  }, props.columns.map(renderHeaderColumn(calcTotalProportions(props.columns), setSortedColumn, sortedColumn, props.sortCallback, props.defaultMinColWidth))), tableBody()));
};

var buildTitleRow = function buildTitleRow(header, headerCustomContent) {
  return createElement(TableTitleRow, {
    className: "table-title-row"
  }, createElement(TableTitleDiv, {
    className: "table-title-div"
  }, header), headerCustomContent);
};

var renderRow = function renderRow(columns, onRowSelection, accordion, toggleAccordion, openIndexes, defaultMinColWidth) {
  return function (rowItem, index) {
    var rowSelection = function rowSelection() {
      return onRowSelection({
        rowData: rowItem,
        toggleAccordion: toggleAccordion(index)
      });
    };

    return createElement("div", {
      key: index
    }, createElement(TableRowDiv, {
      className: "table-row",
      clickable: !!onRowSelection,
      // Will always have tabIndex to allow screenreaders to navigate through the table
      tabIndex: !!onRowSelection ? 0 : undefined,
      role: !!onRowSelection ? "button" : undefined,
      // only add onClick listener if user has supplied a function
      onClick: onRowSelection ? rowSelection : function () {
        return false;
      },
      onKeyDown: onRowSelection ? function (event) {
        return onEnterKeyPress(event, toggleAccordion(index));
      } : function () {
        return false;
      }
    }, columns.map(renderRowColumn(rowItem, calcTotalProportions(columns), index, openIndexes, toggleAccordion, defaultMinColWidth))), openIndexes[index] && accordion ? accordion(rowItem) : null);
  };
};

var renderRowColumn = function renderRowColumn(rowItem, totalWidthProportions, index, openIndexes, toggleAccordion, defaultMinColWidth) {
  return function (columnItem, columnIndex) {
    var tmp;

    if (columnItem.cellValue) {
      tmp = columnItem.cellValue({
        isOpen: openIndexes[index],
        rowData: rowItem,
        toggleAccordion: toggleAccordion(index)
      });
    } else {
      var cellData = rowItem[columnItem.dataName];

      if (cellData === undefined) {
        console.warn("dataName \"".concat(columnItem.dataName, "\" does not match any of the data fields. Make sure the key/value pair matches the dataname"));
      }

      tmp = cellData;
    }

    return createElement(TableRowItemDiv, {
      key: columnIndex,
      className: "table-cell",
      totalWidthProportions: totalWidthProportions,
      colWidthProportion: columnItem.colWidthProportion,
      minWidth: columnItem.minWidth || defaultMinColWidth || null
    }, tmp);
  };
};

var onEnterKeyPress = function onEnterKeyPress(event, fn) {
  if (event.keyCode === 13) {
    fn();
  }
};

var renderHeaderColumn = function renderHeaderColumn(totalWidthProportions, setSortedColumn, sortedColumn, sortCallback, defaultMinColWidth) {
  return function (item, index) {
    var isCurrentColumn = sortedColumn ? item.dataName === sortedColumn.dataName : false;

    var setColumn = function setColumn() {
      return setCurrentSortColumn(isCurrentColumn, item, setSortedColumn, sortedColumn, sortCallback);
    };

    return createElement(TableHeaderItemDiv, {
      key: index,
      totalWidthProportions: totalWidthProportions,
      colWidthProportion: item.colWidthProportion,
      minWidth: item.minWidth || defaultMinColWidth || null,
      className: "table-header-cell",
      // only add onClick listener if user has supplied a sort function
      // i.e. if the column is sortable
      onClick: item.sort ? setColumn : function () {
        return false;
      },
      clickable: !!item.sort,
      role: !!item.sort ? "button" : undefined,
      tabIndex: !!item.sort ? 0 : undefined,
      onKeyDown: item.sort ? function (event) {
        return onEnterKeyPress(event, setColumn);
      } : function () {
        return false;
      }
    }, item.title, renderArrow(!!item.sort, isCurrentColumn, sortedColumn && sortedColumn.order));
  };
};

var sortData = function sortData(data, allColumns, currentlySortedColumn) {
  var sortedData = _toConsumableArray(data);

  if (currentlySortedColumn) {
    // retrieve the column object for the currently sorted column
    var column = allColumns.find(function (el) {
      return el.dataName === currentlySortedColumn.dataName;
    });

    if (column && column.sort) {
      // if a boolean is provided, do normal alphanumeric sorting, otherwise use provided sort function
      if (typeof column.sort === "boolean") {
        sortedData = data.sort(sortFn(column.dataName, currentlySortedColumn.order));
      } else if (typeof column.sort === "function" && currentlySortedColumn.order === "asc") {
        sortedData = data.sort(column.sort);
      } else if (typeof column.sort === "function" && currentlySortedColumn.order === "desc") {
        sortedData = data.sort(column.sort).reverse();
      } else {
        console.warn("Invalid options supplied to sorting field");
      }
    }
  }

  return sortedData;
}; // sortFn is a closure that generates the comparator function for sorting the data


var sortFn = function sortFn(dataName, order) {
  return function (a, b) {
    var check = 0; // Checks if only one of the key has a value, if so no need to compare.

    if (!a[dataName] && b[dataName]) {
      return order === "desc" ? 1 : -1;
    } else if (a[dataName] && !b[dataName]) {
      return order === "desc" ? -1 : 1;
    } else if (!a[dataName] && !b[dataName]) {
      return 0;
    } // Checks if both a and b are date objects. compares date objects only if is true


    var bothDateObject = isDate(a[dataName]) && isDate(b[dataName]);
    var dataA = bothDateObject ? new Date(a[dataName]) : a[dataName];
    var dataB = bothDateObject ? new Date(b[dataName]) : b[dataName];

    if (dataA > dataB) {
      check = 1;
    } else if (dataA < dataB) {
      check = -1;
    }

    return order === "desc" ? check * -1 : check;
  };
}; // sum up all the supplied proportions or default to 1


var calcTotalProportions = function calcTotalProportions(columns) {
  return columns.reduce(function (acc, val) {
    return acc + (val.colWidthProportion ? val.colWidthProportion : 1);
  }, 0);
};

var renderArrow = function renderArrow(sortable, isCurrentColumn, order) {
  if (isCurrentColumn) {
    return createElement(ArrowIcon, {
      order: order,
      height: "20px"
    });
  }

  if (sortable) {
    return createElement(HoverableArrow, {
      height: "20px",
      id: "hoverableArrow"
    });
  }

  return null;
};

var setCurrentSortColumn = function setCurrentSortColumn(isCurrentColumn, column, setSortedColumn, sortedColumn, sortCallback) {
  var sortObj = {
    dataName: column.dataName,
    order: "asc"
  };

  if (column.sort && isCurrentColumn) {
    if (sortedColumn && (sortedColumn.order === "asc" || !sortedColumn.order)) {
      sortObj.order = "desc";
    } else if (sortedColumn && sortedColumn.order === "desc") {
      sortObj.order = "asc";
    }
  }

  setSortedColumn(sortObj); // If a sortCallback is provided, will delegate sorting to the provided function

  if (sortCallback) {
    sortCallback(sortObj);
  }
};

var ArrowIcon =
/*#__PURE__*/
styled(UpwardIcon)(
/*#__PURE__*/
_templateObject$1(), function (props) {
  return props.order === "asc" || !props.order ? "rotate(0deg)" : "rotate(180deg)";
});
var CenteredDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject2$1());
var HoverableArrow =
/*#__PURE__*/
styled(UpwardIcon)(
/*#__PURE__*/
_templateObject3$1());
var MainDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject4$1());
var TableDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject5());
var TableTitleRow =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject6());
var TableTitleDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject7());
var TableHeaderRowDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject8());
var TableHeaderItemDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject9(), function (props) {
  return props.clickable ? "pointer" : "cursor";
}, function (props) {
  return "".concat((props.colWidthProportion || 1) / props.totalWidthProportions * 100, "%");
}, function (props) {
  return props.minWidth ? "".concat(props.minWidth, "px") : null;
});
var TableRowDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject10(), function (props) {
  return props.clickable ? "pointer" : "cursor";
});
var TableRowItemDiv =
/*#__PURE__*/
styled.div(
/*#__PURE__*/
_templateObject11(), function (props) {
  return "".concat((props.colWidthProportion || 1) / props.totalWidthProportions * 100, "%");
}, function (props) {
  return props.minWidth ? "".concat(props.minWidth, "px") : null;
});

export default ReactMaterialTable;
