'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extendStyle = extendStyle;
exports.sortCssNodesBySpecificity = sortCssNodesBySpecificity;
exports.getCssFromStyleTags = getCssFromStyleTags;

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _specificity = require('specificity');

var _specificity2 = _interopRequireDefault(_specificity);

var _posthtmlAttrsParser = require('posthtml-attrs-parser');

var _posthtmlAttrsParser2 = _interopRequireDefault(_posthtmlAttrsParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extendStyle(htmlNode, cssNode) {
    var attrs = (0, _posthtmlAttrsParser2.default)(htmlNode.attrs);
    var cssNodeCss = parseCssFromNode(cssNode);
    attrs.style = (0, _objectAssign2.default)(attrs.style || {}, cssNodeCss);
    htmlNode.attrs = attrs.compose();

    return htmlNode;
}

function sortCssNodesBySpecificity(nodes) {
    // Sort CSS nodes by specificity (ascending): div - .foo - #bar
    return nodes.sort(function (a, b) {
        a = typeof a.selector == 'string' ? getSpecificity(a.selector) : 0;
        b = typeof b.selector == 'string' ? getSpecificity(b.selector) : 0;

        if (a > b) {
            return 1;
        } else if (a < b) {
            return -1;
        } else {
            return 0;
        }
    });
}

function getCssFromStyleTags(htmlTree) {
    var css = [];
    htmlTree.match({ tag: 'style' }, function (tag) {
        css = css.concat(tag.content || []);
        return tag;
    });

    return css.join(' ');
}

var specificityCache = {};
function getSpecificity(selector) {
    if (specificityCache[selector] !== undefined) {
        return specificityCache[selector];
    }

    var specificityResult = _specificity2.default.calculate(selector)[0];
    var specificityParts = specificityResult.specificity.split(',').reverse();
    // Convert "0,1,3,2" to 10302 (2*1 + 3*100 + 1*10'000 + 0*1'000'000)
    var totalSpecificity = specificityParts.reduce(function (totalSpecificity, specificity, i) {
        specificity = parseInt(specificity, 10);
        return totalSpecificity + specificity * Math.pow(10, i * 2);
    }, 0);

    specificityCache[selector] = totalSpecificity;

    return totalSpecificity;
}

function parseCssFromNode(cssNode) {
    var css = {};
    cssNode.nodes.forEach(function (node) {
        css[node.prop] = node.value;
    });

    return css;
}